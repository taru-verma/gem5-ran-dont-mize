----- Working Setup for KVM -----
1. Download latest gem5 from gem5-ran-dont-mize repo
2. Checkout branch `ran-dont-mize`
    2.1 If using official gem5 repo `develop` branch, checkout
        2.1.1 commit 9e97dbe8c8a77643197b28737f47d9ef64d8bb17 - latest version with more fixes; freezing repo here unless there are bugs
        2.1.2 commit 9a01d3e92765f14055756457403bbe4ecfce2d5b - first version which worked and had the `kvm` fix 12278 available
3. Build gem5.opt inside the docker image
    cmd: docker run --volume /home/taru/research/randomized-caches/experiments-dir:/experiments-dir -it gem5-develop-20.0.4-v2
4. Build linux image and kernel outside the docker image
    4.1. Get packer files for linux image from gem5art-experiments repo (branch `gem5-20-1-boot-tests`, image `ubuntu-18.04.2-server-amd64.iso`)
    4.2. Get linux kernel config from gem5art-experiments (tested with `v5.2.3`)
5. Run gem5 docker image `gem5-develop-20.0.4-kvm-ready` as root and with the `--privileged` flag to access `/dev/kvm`
    cmd: docker run --volume /home/taru/research/randomized-caches/experiments-dir:/experiments-dir -it --privileged gem5-develop-20.0.4-v2
6. Test KVM boot with default boot tests (confirmed working for init and systemd)
    cmd: build/X86/gem5.opt tests/gem5/x86-boot-tests/run_exit.py --disk=./disk-image/boot-exit/boot-exit-image/boot-exit --kernel=./linux/vmlinux-v5.2.3 --cpu-type=kvm --num-cpus=1 --boot-type=init


===== Old notes =====

----- Setting up docker image for tests -----
1. Run the default 20.04 gem5 image, don't add --rm so that changes made to install pip and other stuff persist
    cmd: docker run --volume <path-to-gem5>:/gem5 -it gcr.io/gem5-test/ubuntu-20.04_all-dependencies
2. Make changes, then run
    cmd: docker commit [CONTAINER_ID] [new_image_name]
    2.a. Current list - <update/upgrade>, vim, wget, unzip, qemu, qemu-kvm, kmod
    2.b. `bison` and `flex` installed for building the linux kernel but they aren't used
    2.c. Make sure `qemu-system-x86` is installed

----- Building m5 -----
1. Build m5 with scons - Small x for x86, unlike gem5 binary
    cmd: scons build/x86/out/m5
2. For gem5-art boot scripts - update boot-exit script with correct path for m5
    2.a. NOTE - only use the image specified in the script, as the boot process commands need to be changed for newer (and potentially older) versions

----- Other notes -----
* Run the docker image as root with the `--privileged` flag after `-it` and before `[image_name]` for kvm support inside the docker container
* Do the packer build outside the gem5 docker image
* Do the kernel build outside the gem5-docker-image, since there's a lot of dependencies to install, and the docker image is not necessary

* Booting the default FS test with image and kernel from gem5art with atomic, init gets a kernel panic
    * It works fine in systemd, takes about 45 minutes; can take checkpoints here 
        cmd: build/X86/gem5.opt tests/gem5/x86-boot-tests/run_exit.py --disk=./disk-image/boot-exit-image/boot-exit --kernel=./linux-stable/vmlinux-5.2.3 --cpu-type=atomic --num-cpus=1 --boot-type=systemd
            Note: the script exit.sh does not have execute permissions by default - need to update this script 

* KVM mode is broken with abandoned 7362 patch in `master` and `stable` branches; can't apply 7361 since some files (system.hh) are deleted
* For a working build, use `develop` branch commit 9a01d3e92765f14055756457403bbe4ecfce2d5b; it has fix 12278, which hasn't been merged to `stable` yet

* The steps on `gem5art` or `gem5art-experiments` don't work with KVM.
    * The commits seem to be all over the place, some config files (say for kernel v5.4) are missing, and info about which commits are used are also missing.
    * Maybe the problem is that I ran some of the stuff on 16.04 base, it might work on 20.04 but it's unlikely with major fixes. 

